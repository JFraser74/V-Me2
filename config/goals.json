[
  {
    "goal": "LangGraph bootstrap agent & Supabase logging",
    "how": "FastAPI /agent/chat → LangGraph ReAct; sessions/messages to Supabase; fallbacks when deps/keys missing",
    "tools": "OPENAI_API_KEY, OPENAI_MODEL, SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY (or SUPABASE_ANON_KEY)",
    "status": "LIVE (backend agent & supabase logging active; UI endpoints available at /agent/*)"
  },
  {
    "goal": "Railway deployment stability",
    "how": "Added __init__.py, PYTHONPATH=., vme_lib namespace; Procfile uses uvicorn",
    "status": "LIVE (deployed builds stable on Railway)"
  },
  {
    "goal": "CI smoke + stable/rotatable admin tokens",
    "how": "smoke.yml uses CI_SETTINGS_ADMIN_TOKEN; runtime SETTINGS_ADMIN_TOKEN rotatable; smoke_all.sh & railway_preflight.sh",
    "tools": "CI_SETTINGS_ADMIN_TOKEN, SETTINGS_ADMIN_TOKEN, BASE_URL",
    "status": "LIVE (CI smoke + admin tokens operational)"
  },
  {
    "goal": "GitHub Actions secrets/schema warnings",
    "how": "Guarded inside step; no job-level secrets in if:",
    "tools": "—",
    "status": "LIVE (CI warnings guarded; pipeline safe)"
  },
  {
    "goal": "Tool events API clamp",
    "how": "GET /agent/tool_events clamps limit via FastAPI Query ≤ 50",
    "tools": "—",
    "status": "LIVE (API validated; rate-limited query param enforced)"
  },
  {
    "goal": "Confirm-gated git push tool",
    "how": "git_push_tool registered; confirm=True required",
    "tools": "GITHUB_PAT/GITHUB_TOKEN",
    "status": "BUILT & TESTED (backend API/tool exists; no UI integration required for write flows)"
  },
  {
    "goal": "Settings helpers in UI",
    "how": "static/ui.js has putSettings + refreshSettings",
    "tools": "—",
    "status": "LIVE (UI settings editor available in the admin panel)"
  },
  {
    "goal": "Smoke scripts",
    "how": "scripts/smoke_all.sh (auto-start, polling, save JSON) + railway_preflight.sh",
    "tools": "—",
    "status": "LIVE (smoke scripts present and used in CI)"
  },
  {
    "goal": "Bridge hardening + rate limit + encrypted peers",
    "how": "Admin-gated /api/bridge/peers; sliding window; Supabase enc; file fallback non-secrets only",
    "tools": "SETTINGS_ADMIN_TOKEN, APP_ENCRYPTION_KEY, SUPABASE_SERVICE_ROLE_KEY",
    "status": "LIVE (bridge endpoints hardened; encryption and rate-limits applied)"
  },
  {
    "goal": "Hardened CLI wrappers (GitHub/Railway)",
    "how": "subprocess.run(no shell), tokens via env/settings, masked output, timeouts",
    "tools": "GITHUB_TOKEN/PAT, RAILWAY_TOKEN",
    "status": "BUILT & TESTED (wrappers implemented; guarded by confirm flags for write actions)"
  },
  {
    "goal": "Docs/Ops & importer",
    "how": ".env.example, OPERATIONS.md, scripts/import_va_min.py",
    "tools": "—",
    "status": "LIVE (documentation and importer scripts present)"
  },
  {
    "goal": "FastAPI lifespan migration",
    "how": "Use lifespan context instead of on_event",
    "tools": "—",
    "status": "BUILT & TESTED (code updated in parts; full migration pending)"
  },
  {
    "goal": "Voice MVP (Whisper/OpenAI)",
    "how": "Server: POST /api/audio/upload → Whisper → reply/log; UI: mic toggle; extend smoke",
    "tools": "OPENAI_API_KEY (Whisper), SUPABASE_*",
    "status": "LIVE",
    "notes": "Fake mode live (/api/audio/upload, /static/mic.html). Real Whisper pending OPENAI_API_KEY + toggle."
  },
  {
    "goal": "Meeting Mode (listen-only)",
    "how": "Continuous capture→Supabase; /api/meeting/end summarizes",
    "tools": "SUPABASE_*",
    "status": "BUILT & TESTED",
    "notes": "Fake mode + write-only Supabase persistence merged (#11, #12). Real ASR pending."
  },
  {
    "goal": "Conversation memory & speed",
    "how": "Persist sessions; add streaming SSE & optional TTS; optimistic UI",
    "tools": "SUPABASE_*, TTS key (OpenAI/ElevenLabs), optional REDIS_URL",
    "status": "PARTIAL",
    "notes": "SSE streaming merged (#27). Threads API merged (#25). Save & Name pending (#29). TTS optional."
  },
  {
    "goal": "Voice-driven Gmail actions",
    "how": "LangGraph tools for list/read/reply/forward/archive with confirm=True; audit to Supabase; confirmation UI",
    "tools": "Google OAuth (CLIENT_ID, CLIENT_SECRET), per-user tokens in Supabase",
    "status": "WAITING FOR: pick Gmail auth path; create tables; tools & UI"
  },
  {
    "goal": "Batch email import (keep)",
    "how": "Incremental importer (VA-min DSN or Gmail API) to va_emails/queue; nightly + manual trigger",
    "tools": "Source DSN or Gmail creds; SUPABASE_*",
    "status": "WAITING FOR: initial backfill; schedule incremental sync"
  },
  {
    "goal": "Inter-service orchestration (no copy/paste)",
    "how": "Bridge endpoints & CLI/API wrappers exposed as LangGraph tools; signed commands; confirm=True default",
    "tools": "GITHUB_TOKEN, RAILWAY_TOKEN, OPENAI_API_KEY",
    "status": "WAITING FOR: define signed cmd schema; add graph nodes"
  },

  {
    "goal": "Ops Orchestrator (Tasks + SSE)",
    "how": "In-app task queue + SSE event log; admin-gated API to create/cancel tasks; in-proc fake mode and Supabase persistence when available; UI hook in Coding panel",
    "tools": "SETTINGS_ADMIN_TOKEN, DEV_LOCAL_LLM, SUPABASE_*, optional OPENAI_API_KEY",
    "status": "LIVE",
    "notes": "Admin-gated API + SSE in Coding panel; fake-mode deterministic stream; best-effort Supabase persistence. SSE auth hardening (ephemeral tokens) implemented. Attachments placeholder added to the Coding panel (Attach button shows a placeholder alert)."
  },
  {
    "goal": "Railway GraphQL projects resolver",
    "how": "Use CLI wrapper until GraphQL error resolved; track support ticket",
    "tools": "RAILWAY_TOKEN",
    "status": "WAITING FOR: Railway support"
  },
  {
    "goal": "Supabase configuration & encryption",
    "how": "Service role for writes; APP_ENCRYPTION_KEY for enc:v1:; admin token policy (CI vs runtime)",
    "tools": "SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, APP_ENCRYPTION_KEY, SETTINGS_ADMIN_TOKEN, CI_SETTINGS_ADMIN_TOKEN",
    "status": "LIVE (Supabase-backed settings and encryption in use)"
  },
  {
    "goal": "GAS transition plan",
    "how": "Keep GAS for legacy triggers short-term; V-Me2 takes over import/actions gradually",
    "tools": "GAS deployment token (if used)",
    "status": "PLANNED"
  },
  {
    "goal": "Development hand-off to V-ME2 Agent",
    "how": "Transition operational planning/merge/deploy orchestration into the V-Me2 LangGraph agent (GPT-5 or future model) running inside the V-Me2 environment with sustained contextual memory and direct tool access. This removes the external human-as-mediator pattern and allows the agent to create tasks, run Ops, and manage PRs when policy/confirm flags permit.",
    "tools": "LangGraph agent, SETTINGS_ADMIN_TOKEN, GITHUB_TOKEN/PAT, RAILWAY_TOKEN, SUPABASE_*, ops orchestrator",
    "status": "PLANNED (requires Ops Orchestrator merged, additional policy & security review, and CI/deploy integration)"
  }
]
